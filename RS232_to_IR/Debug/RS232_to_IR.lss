
RS232_to_IR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000003a8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800146  00800146  00000482  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c82  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093b  00000000  00000000  00001206  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f5  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000493  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ad  00000000  00000000  00002753  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e4       	ldi	r26, 0x46	; 70
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 34       	cpi	r26, 0x49	; 73
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 83 01 	call	0x306	; 0x306 <main>
  9e:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <enableIROut>:
//~ #endif*/
#define mark(t) TCCR1A |= _BV(COM1A1); _delay_us(t)
//#define space(t) TCCR1A  &= ~(_BV(COM1A1)); _delay_us(t)
#define space(t) do { TCCR1A &= ~_BV(COM1A1); PORTB &= ~_BV(1); if ((t) > 0) _delay_us(t); } while (0)

void enableIROut(int khz) {
  a6:	bc 01       	movw	r22, r24

	// Disable the Timer2 Interrupt (which is used for receiving IR)
	//TIMER_DISABLE_INTR; //Timer2 Overflow Interrupt

	/*pinMode(TIMER_PWM_PIN, OUTPUT);*/
	PORTB |= _BV(1);
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	85 b9       	out	0x05, r24	; 5
	// COM2A = 00: disconnect OC2A
	// COM2B = 00: disconnect OC2B; to send signal set to 10: OC2B non-inverted
	// WGM2 = 101: phase-correct PWM with OCRA as top
	// CS2 = 000: no prescaling
	// The top value for the timer.  The modulation frequency will be SYSCLOCK / 2 / OCR2A.
	pwmval = 8000/khz;
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	9f e1       	ldi	r25, 0x1F	; 31
  b2:	0e 94 9b 01 	call	0x336	; 0x336 <__divmodhi4>
  b6:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <__data_end+0x1>
  ba:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <__data_end>
	TCCR1A = _BV(WGM11);
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = _BV(WGM13)|_BV(CS10);
  c4:	81 e1       	ldi	r24, 0x11	; 17
  c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = pwmval;
  ca:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
  ce:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
  d2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  d6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = pwmval / 3;
  da:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <__data_end>
  de:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <__data_end+0x1>
  e2:	ab ea       	ldi	r26, 0xAB	; 171
  e4:	ba ea       	ldi	r27, 0xAA	; 170
  e6:	0e 94 af 01 	call	0x35e	; 0x35e <__umulhisi3>
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  f6:	08 95       	ret

000000f8 <sendPanasonic>:
	#define PANASONIC_HDR_MARK    3502
	#define PANASONIC_HDR_SPACE   1750
	#define PANASONIC_BIT_MARK     502
	#define PANASONIC_ONE_SPACE   1244
	#define PANASONIC_ZERO_SPACE   400
	void  sendPanasonic (unsigned int address,  unsigned long data){
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ec 01       	movw	r28, r24
 106:	6a 01       	movw	r12, r20
 108:	7b 01       	movw	r14, r22
		unsigned long  mask;
		// Set IR carrier frequency
		enableIROut(35);
 10a:	83 e2       	ldi	r24, 0x23	; 35
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <enableIROut>

		// Header
		mark(PANASONIC_HDR_MARK);
 112:	e0 e8       	ldi	r30, 0x80	; 128
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	87 eb       	ldi	r24, 0xB7	; 183
 11e:	96 e3       	ldi	r25, 0x36	; 54
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <sendPanasonic+0x28>
 124:	00 c0       	rjmp	.+0      	; 0x126 <sendPanasonic+0x2e>
 126:	00 00       	nop
		space(PANASONIC_HDR_SPACE);
 128:	80 81       	ld	r24, Z
 12a:	8f 77       	andi	r24, 0x7F	; 127
 12c:	80 83       	st	Z, r24
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	85 b9       	out	0x05, r24	; 5
 134:	e7 e5       	ldi	r30, 0x57	; 87
 136:	fb e1       	ldi	r31, 0x1B	; 27
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <sendPanasonic+0x40>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <sendPanasonic+0x46>
 13e:	00 00       	nop

		// Address
		for (mask = 1UL << (16 - 1);  mask;  mask >>= 1) {
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e8       	ldi	r25, 0x80	; 128
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	37 c0       	rjmp	.+110    	; 0x1b8 <sendPanasonic+0xc0>
			mark(PANASONIC_BIT_MARK);
 14a:	e0 e8       	ldi	r30, 0x80	; 128
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	20 81       	ld	r18, Z
 150:	20 68       	ori	r18, 0x80	; 128
 152:	20 83       	st	Z, r18
 154:	e7 ed       	ldi	r30, 0xD7	; 215
 156:	f7 e0       	ldi	r31, 0x07	; 7
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <sendPanasonic+0x60>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <sendPanasonic+0x66>
 15e:	00 00       	nop
			if (address & mask)  { space(PANASONIC_ONE_SPACE) ; }
 160:	ae 01       	movw	r20, r28
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	48 23       	and	r20, r24
 168:	59 23       	and	r21, r25
 16a:	6a 23       	and	r22, r26
 16c:	7b 23       	and	r23, r27
 16e:	45 2b       	or	r20, r21
 170:	46 2b       	or	r20, r22
 172:	47 2b       	or	r20, r23
 174:	79 f0       	breq	.+30     	; 0x194 <sendPanasonic+0x9c>
 176:	e0 e8       	ldi	r30, 0x80	; 128
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	20 81       	ld	r18, Z
 17c:	2f 77       	andi	r18, 0x7F	; 127
 17e:	20 83       	st	Z, r18
 180:	25 b1       	in	r18, 0x05	; 5
 182:	2d 7f       	andi	r18, 0xFD	; 253
 184:	25 b9       	out	0x05, r18	; 5
 186:	ef e6       	ldi	r30, 0x6F	; 111
 188:	f3 e1       	ldi	r31, 0x13	; 19
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <sendPanasonic+0x92>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <sendPanasonic+0x98>
 190:	00 00       	nop
 192:	0e c0       	rjmp	.+28     	; 0x1b0 <sendPanasonic+0xb8>
			else                 { space(PANASONIC_ZERO_SPACE) ; }
 194:	e0 e8       	ldi	r30, 0x80	; 128
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	20 81       	ld	r18, Z
 19a:	2f 77       	andi	r18, 0x7F	; 127
 19c:	20 83       	st	Z, r18
 19e:	25 b1       	in	r18, 0x05	; 5
 1a0:	2d 7f       	andi	r18, 0xFD	; 253
 1a2:	25 b9       	out	0x05, r18	; 5
 1a4:	ef e3       	ldi	r30, 0x3F	; 63
 1a6:	f6 e0       	ldi	r31, 0x06	; 6
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <sendPanasonic+0xb0>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <sendPanasonic+0xb6>
 1ae:	00 00       	nop
		// Header
		mark(PANASONIC_HDR_MARK);
		space(PANASONIC_HDR_SPACE);

		// Address
		for (mask = 1UL << (16 - 1);  mask;  mask >>= 1) {
 1b0:	b6 95       	lsr	r27
 1b2:	a7 95       	ror	r26
 1b4:	97 95       	ror	r25
 1b6:	87 95       	ror	r24
 1b8:	00 97       	sbiw	r24, 0x00	; 0
 1ba:	a1 05       	cpc	r26, r1
 1bc:	b1 05       	cpc	r27, r1
 1be:	29 f6       	brne	.-118    	; 0x14a <sendPanasonic+0x52>
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	a0 e0       	ldi	r26, 0x00	; 0
 1c6:	b0 e8       	ldi	r27, 0x80	; 128
 1c8:	36 c0       	rjmp	.+108    	; 0x236 <sendPanasonic+0x13e>
			else                 { space(PANASONIC_ZERO_SPACE) ; }
		}

		// Data
		for (mask = 1UL << (32 - 1);  mask;  mask >>= 1) {
			mark(PANASONIC_BIT_MARK);
 1ca:	e0 e8       	ldi	r30, 0x80	; 128
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	20 81       	ld	r18, Z
 1d0:	20 68       	ori	r18, 0x80	; 128
 1d2:	20 83       	st	Z, r18
 1d4:	e7 ed       	ldi	r30, 0xD7	; 215
 1d6:	f7 e0       	ldi	r31, 0x07	; 7
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <sendPanasonic+0xe0>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <sendPanasonic+0xe6>
 1de:	00 00       	nop
			if (data & mask)  { space(PANASONIC_ONE_SPACE) ; }
 1e0:	ac 01       	movw	r20, r24
 1e2:	bd 01       	movw	r22, r26
 1e4:	4c 21       	and	r20, r12
 1e6:	5d 21       	and	r21, r13
 1e8:	6e 21       	and	r22, r14
 1ea:	7f 21       	and	r23, r15
 1ec:	45 2b       	or	r20, r21
 1ee:	46 2b       	or	r20, r22
 1f0:	47 2b       	or	r20, r23
 1f2:	79 f0       	breq	.+30     	; 0x212 <sendPanasonic+0x11a>
 1f4:	e0 e8       	ldi	r30, 0x80	; 128
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	20 81       	ld	r18, Z
 1fa:	2f 77       	andi	r18, 0x7F	; 127
 1fc:	20 83       	st	Z, r18
 1fe:	25 b1       	in	r18, 0x05	; 5
 200:	2d 7f       	andi	r18, 0xFD	; 253
 202:	25 b9       	out	0x05, r18	; 5
 204:	ef e6       	ldi	r30, 0x6F	; 111
 206:	f3 e1       	ldi	r31, 0x13	; 19
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <sendPanasonic+0x110>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <sendPanasonic+0x116>
 20e:	00 00       	nop
 210:	0e c0       	rjmp	.+28     	; 0x22e <sendPanasonic+0x136>
			else              { space(PANASONIC_ZERO_SPACE) ; }
 212:	e0 e8       	ldi	r30, 0x80	; 128
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	20 81       	ld	r18, Z
 218:	2f 77       	andi	r18, 0x7F	; 127
 21a:	20 83       	st	Z, r18
 21c:	25 b1       	in	r18, 0x05	; 5
 21e:	2d 7f       	andi	r18, 0xFD	; 253
 220:	25 b9       	out	0x05, r18	; 5
 222:	ef e3       	ldi	r30, 0x3F	; 63
 224:	f6 e0       	ldi	r31, 0x06	; 6
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <sendPanasonic+0x12e>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <sendPanasonic+0x134>
 22c:	00 00       	nop
			if (address & mask)  { space(PANASONIC_ONE_SPACE) ; }
			else                 { space(PANASONIC_ZERO_SPACE) ; }
		}

		// Data
		for (mask = 1UL << (32 - 1);  mask;  mask >>= 1) {
 22e:	b6 95       	lsr	r27
 230:	a7 95       	ror	r26
 232:	97 95       	ror	r25
 234:	87 95       	ror	r24
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	a1 05       	cpc	r26, r1
 23a:	b1 05       	cpc	r27, r1
 23c:	31 f6       	brne	.-116    	; 0x1ca <sendPanasonic+0xd2>
			if (data & mask)  { space(PANASONIC_ONE_SPACE) ; }
			else              { space(PANASONIC_ZERO_SPACE) ; }
		}

		// Footer
		mark(PANASONIC_BIT_MARK);
 23e:	e0 e8       	ldi	r30, 0x80	; 128
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 68       	ori	r24, 0x80	; 128
 246:	80 83       	st	Z, r24
 248:	87 ed       	ldi	r24, 0xD7	; 215
 24a:	97 e0       	ldi	r25, 0x07	; 7
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <sendPanasonic+0x154>
 250:	00 c0       	rjmp	.+0      	; 0x252 <sendPanasonic+0x15a>
 252:	00 00       	nop
		space(0);  // Always end with the LED off
 254:	80 81       	ld	r24, Z
 256:	8f 77       	andi	r24, 0x7F	; 127
 258:	80 83       	st	Z, r24
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	8d 7f       	andi	r24, 0xFD	; 253
 25e:	85 b9       	out	0x05, r24	; 5
		
// 		TCCR1B = 0;
//         TCCR1A &= ~(_BV(COM1A1));  // Disable PWM output on OC1A
	}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	df 90       	pop	r13
 26a:	cf 90       	pop	r12
 26c:	08 95       	ret

0000026e <__vector_18>:
	{ KEY_STORE_COMMAND,       KEY_STORE }
};

uint8_t cmd;

ISR(USART_RX_vect) {
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	cmd = UDR0;
 290:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 294:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <cmd>
	for (uint8_t i = 0; i < sizeof(commandMap) / sizeof(commandMap[0]); i++) {
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	22 c0       	rjmp	.+68     	; 0x2e0 <__vector_18+0x72>
		if (commandMap[i].command == cmd) {
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	e2 0f       	add	r30, r18
 2ac:	f3 1f       	adc	r31, r19
 2ae:	e0 50       	subi	r30, 0x00	; 0
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	90 81       	ld	r25, Z
 2b4:	49 13       	cpse	r20, r25
 2b6:	13 c0       	rjmp	.+38     	; 0x2de <__vector_18+0x70>
			sendPanasonic(ADDRESS, commandMap[i].irCode);
 2b8:	f9 01       	movw	r30, r18
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	2e 0f       	add	r18, r30
 2c4:	3f 1f       	adc	r19, r31
 2c6:	f9 01       	movw	r30, r18
 2c8:	e0 50       	subi	r30, 0x00	; 0
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	41 81       	ldd	r20, Z+1	; 0x01
 2ce:	52 81       	ldd	r21, Z+2	; 0x02
 2d0:	63 81       	ldd	r22, Z+3	; 0x03
 2d2:	74 81       	ldd	r23, Z+4	; 0x04
 2d4:	84 e0       	ldi	r24, 0x04	; 4
 2d6:	90 e4       	ldi	r25, 0x40	; 64
 2d8:	0e 94 7c 00 	call	0xf8	; 0xf8 <sendPanasonic>
			break;
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <__vector_18+0x76>

uint8_t cmd;

ISR(USART_RX_vect) {
	cmd = UDR0;
	for (uint8_t i = 0; i < sizeof(commandMap) / sizeof(commandMap[0]); i++) {
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	8e 30       	cpi	r24, 0x0E	; 14
 2e2:	e0 f2       	brcs	.-72     	; 0x29c <__vector_18+0x2e>
// 			break;
// 		case EJECT_COMMAND:
// 			sendPanasonic(ADDRESS, STOP_CODE);
// 			break;
// 	}
}
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	3f 91       	pop	r19
 2fa:	2f 91       	pop	r18
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <main>:

int main(void)
{
	DDRD = 0xFF;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF;
 30a:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;
 30c:	84 b9       	out	0x04, r24	; 4
	
	DDRD &= ~(1 << PD0);
 30e:	8a b1       	in	r24, 0x0a	; 10
 310:	8e 7f       	andi	r24, 0xFE	; 254
 312:	8a b9       	out	0x0a, r24	; 10
	
	UART_init();
 314:	0e 94 8e 01 	call	0x31c	; 0x31c <UART_init>
	
	sei();
 318:	78 94       	sei
 31a:	ff cf       	rjmp	.-2      	; 0x31a <main+0x14>

0000031c <UART_init>:
#include <avr/io.h>
#include <stdio.h>
#include "uart.h"

void UART_init() {
	UBRR0 = F_CPU / 16 / BAUDRATE - 1;
 31c:	87 e6       	ldi	r24, 0x67	; 103
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 324:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0C = (0 << USBS0) | (3 << UCSZ00);
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = (1<<TXEN0) | (1<<RXEN0)| (1 << RXCIE0);
 32e:	88 e9       	ldi	r24, 0x98	; 152
 330:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 334:	08 95       	ret

00000336 <__divmodhi4>:
 336:	97 fb       	bst	r25, 7
 338:	07 2e       	mov	r0, r23
 33a:	16 f4       	brtc	.+4      	; 0x340 <__divmodhi4+0xa>
 33c:	00 94       	com	r0
 33e:	07 d0       	rcall	.+14     	; 0x34e <__divmodhi4_neg1>
 340:	77 fd       	sbrc	r23, 7
 342:	09 d0       	rcall	.+18     	; 0x356 <__divmodhi4_neg2>
 344:	0e 94 be 01 	call	0x37c	; 0x37c <__udivmodhi4>
 348:	07 fc       	sbrc	r0, 7
 34a:	05 d0       	rcall	.+10     	; 0x356 <__divmodhi4_neg2>
 34c:	3e f4       	brtc	.+14     	; 0x35c <__divmodhi4_exit>

0000034e <__divmodhi4_neg1>:
 34e:	90 95       	com	r25
 350:	81 95       	neg	r24
 352:	9f 4f       	sbci	r25, 0xFF	; 255
 354:	08 95       	ret

00000356 <__divmodhi4_neg2>:
 356:	70 95       	com	r23
 358:	61 95       	neg	r22
 35a:	7f 4f       	sbci	r23, 0xFF	; 255

0000035c <__divmodhi4_exit>:
 35c:	08 95       	ret

0000035e <__umulhisi3>:
 35e:	a2 9f       	mul	r26, r18
 360:	b0 01       	movw	r22, r0
 362:	b3 9f       	mul	r27, r19
 364:	c0 01       	movw	r24, r0
 366:	a3 9f       	mul	r26, r19
 368:	70 0d       	add	r23, r0
 36a:	81 1d       	adc	r24, r1
 36c:	11 24       	eor	r1, r1
 36e:	91 1d       	adc	r25, r1
 370:	b2 9f       	mul	r27, r18
 372:	70 0d       	add	r23, r0
 374:	81 1d       	adc	r24, r1
 376:	11 24       	eor	r1, r1
 378:	91 1d       	adc	r25, r1
 37a:	08 95       	ret

0000037c <__udivmodhi4>:
 37c:	aa 1b       	sub	r26, r26
 37e:	bb 1b       	sub	r27, r27
 380:	51 e1       	ldi	r21, 0x11	; 17
 382:	07 c0       	rjmp	.+14     	; 0x392 <__udivmodhi4_ep>

00000384 <__udivmodhi4_loop>:
 384:	aa 1f       	adc	r26, r26
 386:	bb 1f       	adc	r27, r27
 388:	a6 17       	cp	r26, r22
 38a:	b7 07       	cpc	r27, r23
 38c:	10 f0       	brcs	.+4      	; 0x392 <__udivmodhi4_ep>
 38e:	a6 1b       	sub	r26, r22
 390:	b7 0b       	sbc	r27, r23

00000392 <__udivmodhi4_ep>:
 392:	88 1f       	adc	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	5a 95       	dec	r21
 398:	a9 f7       	brne	.-22     	; 0x384 <__udivmodhi4_loop>
 39a:	80 95       	com	r24
 39c:	90 95       	com	r25
 39e:	bc 01       	movw	r22, r24
 3a0:	cd 01       	movw	r24, r26
 3a2:	08 95       	ret

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
